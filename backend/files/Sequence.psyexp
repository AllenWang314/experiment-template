<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2020.1.2">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant':'', 'session':'001'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="(1024, 768)" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="Sequence" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="Instructions">
      <TextComponent name="text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Watch the sequences of letters. &amp;#10;When you are certain you know what letter comes next, &amp;#10;or if you know the sequence is random, press spacebar. &amp;#10;&amp;#10;Press spacebar to start experiment" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="blankscreen">
      <KeyboardComponent name="key_resp_3">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="text_3">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="text_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val=".25" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="InitCode">
      <CodeComponent name="code">
        <Param name="Begin Experiment" updates="constant" val="import numpy as np &amp;#10;from hmmlearn import hmm&amp;#10;&amp;#10;&amp;#10;#Length of each trial&amp;#10;SequenceLength = 20;&amp;#10;# ARRAYS&amp;#10;initialization = np.array([1/3,1/3,1/3])&amp;#10;# Random &amp;#10;randomtrans = np.array([[1/3,1/3,1/3],[1/3,1/3,1/3],[1/3,1/3,1/3]])&amp;#10;#'Motif A'&amp;#10;transmat1 = np.array([[.9,.05,0.05],[.99,.005,0.005],[.99,0.005,0.005]])&amp;#10;#'Motif B'&amp;#10;transmat2 = np.array([[0.005,.99,0.005],[.05,.9,0.05],[.005,0.99,0.005]])&amp;#10;#'Motif C'&amp;#10;transmat3 = np.array([[0.005,.005,.99],[0.005,.005,.99],[.05,0.05,0.9]])&amp;#10;&amp;#10;#'Motif 'AB'&amp;#10;transmat4 = np.array([[0.05,.9,0.05],[.9,.05,0.05],[0.495,0.495,0.01]])&amp;#10;#'Motif 'AC'&amp;#10;transmat5 = np.array([[0.05,.05,0.9],[.495,.01,0.495],[.9,0.05,0.05]])&amp;#10;#'Motif 'BC'&amp;#10;transmat6 = np.array([[0.01,.495,.495],[0.05,.05,.9],[.05,0.9,0.05]])&amp;#10;&amp;#10;&amp;#10;#'Motif 'ABC'&amp;#10;transmat7 = np.array([[0.05,.9,0.05],[.05,.05,0.9],[0.9,0.05,0.05]])&amp;#10;#'Motif 'ACB'&amp;#10;transmat8 = np.array([[0.05,.05,0.9],[.9,.05,0.05],[.05,0.9,0.05]])&amp;#10;&amp;#10;# put all together - not used&amp;#10;transitionMatrix = np.array([randomtrans,transmat1,transmat2,transmat3,transmat4,transmat5,transmat6,transmat7,transmat8]);&amp;#10;transitionGuide = np.array(['Random','A','B','C','AB','AC','BC','ABC','BAC'])&amp;#10;&amp;#10;# FUNCTION&amp;#10;def returnsequence(init,transmat,length):&amp;#10;    model = hmm.MultinomialHMM(n_components=3)&amp;#10;    model.startprob_ = init;&amp;#10;    model.transmat_ = transmat;&amp;#10;    model.emissionprob_ = np.array([[1,0,0],[0,1,0],[0,0,1]]);&amp;#10;    [X,Z] = model.sample(length);&amp;#10;    Letters = np.array([]);&amp;#10;    for i in range(0,len(X)):&amp;#10;        if X[i] == 0:&amp;#10;            Letters = np.append(Letters,'A')&amp;#10;        elif X[i] == 1:&amp;#10;            Letters = np.append(Letters,'B')&amp;#10;        else: &amp;#10;            Letters = np.append(Letters,'C')&amp;#10;    return Letters" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="&amp;#10;// set variables&amp;#10;var SequenceLength, initialization, randomtrans, transitionGuide,  transmat1, transmat2, transmat3, transmat4, transmat5, transmat6, transmat7, transmat8;&amp;#10;SequenceLength = 20;&amp;#10;initialization = [(1 / 3), (1 / 3), (1 / 3)];&amp;#10;randomtrans = [[(1 / 3), (1 / 3), (1 / 3)], [(1 / 3), (1 / 3), (1 / 3)], [(1 / 3), (1 / 3), (1 / 3)]];&amp;#10;transmat1 = [[0.9, 0.05, 0.05], [0.99, 0.005, 0.005], [0.99, 0.005, 0.005]];&amp;#10;transmat2 = [[0.005, 0.99, 0.005], [0.05, 0.9, 0.05], [0.005, 0.99, 0.005]];&amp;#10;transmat3 = [[0.005, 0.005, 0.99], [0.005, 0.005, 0.99], [0.05, 0.05, 0.9]];&amp;#10;transmat4 = [[0.05, 0.9, 0.05], [0.9, 0.05, 0.05], [0.495, 0.495, 0.01]];&amp;#10;transmat5 = [[0.05, 0.05, 0.9], [0.495, 0.01, 0.495], [0.9, 0.05, 0.05]];&amp;#10;transmat6 = [[0.01, 0.495, 0.495], [0.05, 0.05, 0.9], [0.05, 0.9, 0.05]];&amp;#10;transmat7 = [[0.05, 0.9, 0.05], [0.05, 0.05, 0.9], [0.9, 0.05, 0.05]];&amp;#10;transmat8 = [[0.05, 0.05, 0.9], [0.9, 0.05, 0.05], [0.05, 0.9, 0.05]];&amp;#10;transitionMatrix = [randomtrans, transmat1, transmat2, transmat3, transmat4, transmat5, transmat6, transmat7, transmat8];&amp;#10;transitionGuide = [&quot;Random&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;AB&quot;, &quot;AC&quot;, &quot;BC&quot;, &quot;ABC&quot;, &quot;BAC&quot;];&amp;#10;&amp;#10;// FUNCTIONS &amp;#10;&amp;#10;// generating a sequence &amp;#10;function returnsequence(init, transmat, length) {&amp;#10;    var Letters, model;&amp;#10;    model = new hmm.MultinomialHMM({&quot;n_components&quot;: 3});&amp;#10;    model.startprob = init;&amp;#10;    model.transmat = transmat;&amp;#10;    model.emissionprob = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]);&amp;#10;    [X, Z] = model.sample(length);&amp;#10;    Letters = np.array([]);&amp;#10;    for (var i = 0, _pj_a = X.length; (i &lt; _pj_a); i += 1) {&amp;#10;        if ((X[i] === 0)) {&amp;#10;            Letters = np.append(Letters, &quot;A&quot;);&amp;#10;        } else {&amp;#10;            if ((X[i] === 1)) {&amp;#10;                Letters = np.append(Letters, &quot;B&quot;);&amp;#10;            } else {&amp;#10;                Letters = np.append(Letters, &quot;C&quot;);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    return Letters;&amp;#10;}&amp;#10;&amp;#10;// randomint &amp;#10;randint = function(min, max) {&amp;#10;  return Math.floor(Math.random() * (max - min) ) + min;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="stimulus">
      <CodeComponent name="code_4">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="var Letter&amp;#10;Letter = Letters[count];&amp;#10;count++;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="Letter = Letters[count]&amp;#10;count = count+1&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if (key_resp_2.keys) {&amp;#10;    stimuli.finished = 1;&amp;#10;}&amp;#10;if (key_resp_3.keys) {&amp;#10;    stimuli.finished = 1;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;if key_resp_2.keys :&amp;#10;        stimuli.finished=1&amp;#10;if key_resp_3.keys:&amp;#10;    stimuli.finished=1" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_4" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="text_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$Letter" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_2">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="test">
      <TextComponent name="Question">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Question" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="What letter comes next? " valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="text_4">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="text_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="'A' .... 'B' ... 'C'....&amp;#10; 'Random ( press x)'" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="SubmitResponse">
        <Param name="allowedKeys" updates="constant" val="'a','A','b','B','c','C','x','X'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="SubmitResponse" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="trialCode">
      <CodeComponent name="code_2">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="var ModelIndex,ModelTrans,Motif,Letters,count&amp;#10;&amp;#10;ModelIndex = randint(0,numModels);&amp;#10;ModelTrans = transitionMatrixBlock1[ModelIndex];&amp;#10;Motif = transitionGuideBlock1[ModelIndex];&amp;#10;Letters = returnsequence(initialization, ModelTrans, SequenceLength);&amp;#10;count = 0;&amp;#10;&amp;#10;// debug&amp;#10;// console.log(Letters);&amp;#10;// console.log(Motif);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="ModelIndex = np.random.randint(numModels)&amp;#10;ModelTrans = transitionMatrixBlock1[ModelIndex]&amp;#10;Motif = transitionGuideBlock1[ModelIndex]&amp;#10;&amp;#10;# set up stimuli&amp;#10;Letters = returnsequence(initialization,ModelTrans,SequenceLength)&amp;#10;count = 0 &amp;#10;print(Letters)&amp;#10;print(Motif)&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_2" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="block1Code">
      <CodeComponent name="code_3">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="var transitionMatrixBlock1,transitionGuideBlock1,numModels&amp;#10;transitionMatrixBlock1 = [randomtrans, transmat1, transmat2, transmat3, transmat4, transmat5, transmat6];&amp;#10;transitionGuideBlock1 = [&quot;Random&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;AB&quot;, &quot;AC&quot;, &quot;BC&quot;];&amp;#10;numModels = transitionMatrixBlock1.length;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;# decide which generating markov models you want present&amp;#10;transitionMatrixBlock1 = np.array([randomtrans,transmat1,transmat2,transmat3,transmat4,transmat5,transmat6]);&amp;#10;transitionGuideBlock1 = np.array(['Random','A','B','C','AB','AC','BC'])&amp;#10;numModels = len(transitionMatrixBlock1)&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_3" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="blankscreen_2">
      <TextComponent name="text_5">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="text_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="feedback">
      <CodeComponent name="code_5">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="previousLetter = Letter;&amp;#10;answer = SubmitResponse.keys;&amp;#10;answer = answer.upper();&amp;#10;console.log(answer);&amp;#10;if ((Motif !== &quot;Random&quot;)) {&amp;#10;    motifLocation = (- 1);&amp;#10;    for (var i = 0, _pj_a = Motif.length; (i &lt; _pj_a); i += 1) {&amp;#10;        if ((Motif[i] === previousLetter)) {&amp;#10;            motifLocation = i;&amp;#10;        }&amp;#10;    }&amp;#10;    if ((motifLocation === (- 1))) {&amp;#10;        Correct = &quot;Incorrect&quot;;&amp;#10;        ColorFeedback = &quot;red&quot;;&amp;#10;    } else {&amp;#10;        if ((motifLocation === (Motif.length - 1))) {&amp;#10;            motifTest = 0;&amp;#10;        } else {&amp;#10;            motifTest = (motifLocation + 1);&amp;#10;        }&amp;#10;        if ((Motif[motifTest] === answer)) {&amp;#10;            Correct = &quot;Correct&quot;;&amp;#10;            ColorFeedback = &quot;green&quot;;&amp;#10;        } else {&amp;#10;            Correct = &quot;Incorrect&quot;;&amp;#10;            ColorFeedback = &quot;red&quot;;&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((answer === &quot;X&quot;)) {&amp;#10;        Correct = &quot;Correct&quot;;&amp;#10;        ColorFeedback = &quot;green&quot;;&amp;#10;    } else {&amp;#10;        Correct = &quot;Incorrect&quot;;&amp;#10;        ColorFeedback = &quot;red&quot;;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="previousLetter = Letter # not perfect&amp;#10;answer = SubmitResponse.keys&amp;#10;# make sure right format&amp;#10;answer = answer.upper()&amp;#10;print(answer)&amp;#10;&amp;#10;# find location in motif by using previousLetter&amp;#10;if Motif != 'Random':&amp;#10;    motifLocation = -1&amp;#10;    for i in range(0,len(Motif)):&amp;#10;        if Motif[i] == previousLetter:&amp;#10;            motifLocation = i&amp;#10;    &amp;#10;# they stopped on a random letter - not in motif &amp;#10;# I think we just judge this wrong &amp;#10;    if motifLocation==(-1):&amp;#10;        Correct='Incorrect'&amp;#10;        ColorFeedback = 'red'&amp;#10;    else:&amp;#10;        if motifLocation==(len(Motif)-1):&amp;#10;            motifTest = 0&amp;#10;        else:&amp;#10;            motifTest = motifLocation+1&amp;#10;        if Motif[motifTest] == answer:&amp;#10;            Correct='Correct'&amp;#10;            ColorFeedback= 'green'&amp;#10;        else:&amp;#10;            Correct='Incorrect'&amp;#10;            ColorFeedback='red'&amp;#10;else:&amp;#10;    # Random condition &amp;#10;    if answer == 'X':&amp;#10;        Correct='Correct'&amp;#10;        ColorFeedback='green'&amp;#10;    else: &amp;#10;        Correct='Incorrect'&amp;#10;        ColorFeedback='red'&amp;#10;        &amp;#10;        &amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_5" valType="code"/>
      </CodeComponent>
      <TextComponent name="Feedback">
        <Param name="color" updates="set every repeat" val="$ColorFeedback" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="Feedback" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$Correct" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="Instructions"/>
    <Routine name="InitCode"/>
    <Routine name="block1Code"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="5" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trialCode"/>
    <LoopInitiator loopType="TrialHandler" name="stimuli">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="$SequenceLength" valType="code"/>
      <Param name="name" updates="None" val="stimuli" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="stimulus"/>
    <Routine name="blankscreen"/>
    <LoopTerminator name="stimuli"/>
    <Routine name="test"/>
    <Routine name="feedback"/>
    <Routine name="blankscreen_2"/>
    <LoopTerminator name="trials"/>
  </Flow>
</PsychoPy2experiment>
